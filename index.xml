<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hands-on Scala Blog</title>
    <link>http://hands-on-scala.github.io/</link>
    <description>Recent content on Hands-on Scala Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jul 2016 15:43:37 +0200</lastBuildDate>
    <atom:link href="http://hands-on-scala.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://hands-on-scala.github.io/about/</link>
      <pubDate>Fri, 15 Jul 2016 15:43:37 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;hi:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Hi :)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m something between a software engineer and a researcher.&lt;/p&gt;

&lt;p&gt;I like dealing with a lot of data, especially with biology-related data.&lt;br /&gt;
I work at a research institute in Hungary, called &lt;a href=&#34;http://www.sztaki.hu/en&#34;&gt;SZTAKI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my free time I like reading, wandering around in forests, and climbing trees.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in my interests, maybe folow me on &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://github.com/ador&#34;&gt;GitHub&lt;/a&gt; or
&lt;a href=&#34;https://hu.linkedin.com/in/adrienn-szabo-2b510818&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also drop me an email, my address is &amp;ldquo;-ador-&amp;rdquo; at &amp;ldquo;proton-mail&amp;rdquo; plus &amp;ldquo;.ch&amp;rdquo;, but leave out all the dashes :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Options in Scala</title>
      <link>http://hands-on-scala.github.io/post/options/</link>
      <pubDate>Sat, 02 Jul 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/options/</guid>
      <description>

&lt;h1 id=&#34;handling-missing-values-in-scala-options:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Handling missing values in Scala: Options&lt;/h1&gt;

&lt;p&gt;Whenever we want to use a value that is not readily available yet &amp;ndash; for example, when we
call a function to compute or fetch something &amp;ndash;
we can not be sure if things go as were planned.
What if the database connection is down? What if the user typed in an invalid string?&lt;/p&gt;

&lt;p&gt;In the Java world, and in many other programming languages, the programmers could
throw an exception (or just pass further the
&amp;lsquo;classic&amp;rsquo; NullPointerException) in these cases to signal that the requested value cold not
be served.&lt;/p&gt;

&lt;p&gt;But oftentimes,
using exceptions for such cases is an overkill, and only adds noise to the code.
It can even happen, that it is completely &amp;lsquo;normal&amp;rsquo; that a function can not return
a proper value for some reason.&lt;/p&gt;

&lt;h2 id=&#34;returning-something-or-nothing:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Returning something or nothing&lt;/h2&gt;

&lt;p&gt;Scala has a built-in type to help us in the situation when we are not sure that
we can return a value: the &lt;em&gt;Option[T]&lt;/em&gt; type. The &lt;em&gt;T&lt;/em&gt; parameter means that it takes a type
inside it as well, and it will be type-safe to use.&lt;/p&gt;

&lt;p&gt;You can think about an Option as a container that either holds a value of type &lt;em&gt;T&lt;/em&gt;, or not.
If the Option is empty, it is called &lt;em&gt;None&lt;/em&gt;, and if it has a value inside, then it
is an object of the class &lt;em&gt;Some[T]&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-options:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;How to use Options&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see a couple of examples of how we can use Options in Scala to represent optional values.&lt;/p&gt;

&lt;h3 id=&#34;returning-an-option-from-our-function:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Returning an Option from our function&lt;/h3&gt;

&lt;p&gt;The following &amp;ldquo;getUserById()&amp;rdquo; function returns an Option
(about Maps, see
&lt;a href=&#39;http://hands-on-scala.github.io/post/maps/&#39;&gt;
the previous post&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getUserMap&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;userMap&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;824&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;2723&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Kate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;535&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Zoe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;8260&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Jonathan&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;userMap&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getUserMap&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;//  Note: we could have just used &lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;//  Map&amp;#39;s buil-in get() method that returns an Option:&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// users.get(id) &lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; 
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt; 
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;None&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;535: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;535&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;550: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getUserById&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;550&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last two lines will print:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;535&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Zoe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;538&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So, the String value &amp;ldquo;Zoe&amp;rdquo; itself is wrapped in &amp;ldquo;Some()&amp;rdquo; in the first case, and we simply
got a &amp;ldquo;None&amp;rdquo; result in the second case, when we used a non-existing id.&lt;/p&gt;

&lt;h3 id=&#34;dealing-with-an-option:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Dealing with an Option&lt;/h3&gt;

&lt;p&gt;What can we do if we receive an Option from somewhere?&lt;/p&gt;

&lt;p&gt;Scala offers many possibilities to handle Options, here I present
the two simplest ones.&lt;/p&gt;

&lt;h4 id=&#34;unwrapping-an-option-and-defining-a-default-value:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Unwrapping an Option and defining a default value&lt;/h4&gt;

&lt;p&gt;If you simply want to unwrap the inner value from a &lt;em&gt;Some&lt;/em&gt;, and
default to something (of the same type as the wrapped value would be) in case of a &lt;em&gt;None&lt;/em&gt;, just use
the &amp;ldquo;getOrElse()&amp;rdquo; function of &lt;em&gt;Option&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;maybeString1&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;None&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;maybeString1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;getOrElse&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;default value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;maybeString2&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;maybeString2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;getOrElse&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;default value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This example will print &amp;ldquo;default value&amp;rdquo; at first, and then &amp;ldquo;Hello&amp;rdquo; to the screen.&lt;/p&gt;

&lt;h4 id=&#34;using-pattern-matching:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Using pattern matching&lt;/h4&gt;

&lt;p&gt;Usually it seems to be an overkill to use pattern matching to handle Options,
but at least
&lt;a href=&#39;http://hands-on-scala.github.io/post/patternmatch1/&#39;&gt;
we have already covered it here&lt;/a&gt;. So let&amp;rsquo;s see how to do this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;None&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;toReturn&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;num&lt;/span&gt; 
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;toReturn&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

In the above example, &amp;ldquo;toReturn&amp;rdquo; will always hold an Int value: if the Option did not
have a proper Int value (if it is not a &lt;em&gt;Some[Int]&lt;/em&gt; but a &lt;em&gt;None&lt;/em&gt;),
then the default value of 0 will be used.
So in this exact case, &amp;ldquo;0&amp;rdquo; will be printed.&lt;/p&gt;

&lt;h4 id=&#34;other-possibilities:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Other possibilities&lt;/h4&gt;

&lt;p&gt;For more smart ideas on dealing with Options, see
&lt;a href=&#34;http://danielwestheide.com/blog/2012/12/19/the-neophytes-guide-to-scala-part-5-the-option-type.html&#34;&gt;Daniel Westheide&amp;rsquo;s blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary-and-other-sources:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Summary and other sources&lt;/h2&gt;

&lt;p&gt;By using Options we, as developers of a certain functionality, can clearly signal that
our function might return without a proper result.
Scala also helps (and requires) the caller of such function
to deal with the situation: for example, by defining a default value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://danielwestheide.com/blog/2012/12/19/the-neophytes-guide-to-scala-part-5-the-option-type.html&#34;&gt;Daniel&amp;rsquo;s post on Options&lt;/a&gt; goes into more details, it&amp;rsquo;s really worth reading.&lt;/p&gt;

&lt;p&gt;Some runnable code examples are available &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/06_options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Feedback is welcome on &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt;
or on &lt;a href=&#34;https://github.com/hands-on-scala/hands-on-scala.github.io/issues/3&#34;&gt;GitHub&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala collections - part 3</title>
      <link>http://hands-on-scala.github.io/post/maps/</link>
      <pubDate>Thu, 16 Jun 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/maps/</guid>
      <description>

&lt;h1 id=&#34;basic-data-structures-in-scala-maps:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Basic data structures in Scala: Maps&lt;/h1&gt;

&lt;p&gt;After &lt;em&gt;Lists&lt;/em&gt; and &lt;em&gt;tuples&lt;/em&gt;, let&amp;rsquo;s have a look at &lt;em&gt;Maps&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They are sometimes called &amp;ldquo;hashtables&amp;rdquo;, &amp;ldquo;hashes&amp;rdquo;, or &amp;ldquo;dictionaries&amp;rdquo; in other programming languages.&lt;/p&gt;

&lt;p&gt;Maps are a bit more complex than what we&amp;rsquo;ve seen before. They come handy
when you need to store associated pairs of data, or when
you need to easily look up a value corresponding to another value (which we will call the &lt;em&gt;key&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;It does matter (as with Lists) what kind of objects you want to store as &lt;em&gt;keys&lt;/em&gt; and as &lt;em&gt;values&lt;/em&gt;.
You can pick a type for each.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-map:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Creating a Map&lt;/h2&gt;

&lt;p&gt;Scala offers a simple syntax to create an immutable Map filled with some key-value pairs:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetMap&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;414&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#scaladays are coming to Berlin!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;435&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Scala is the new golden child&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; 
      &lt;span style=&#34;color: #ae81ff&#34;&gt;506&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#scaladays Scaladex: scala package index&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;justAMap&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3.56&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;notValidMap&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6.3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;emptyMap&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

As usual, Scala will infer the type of the maps, if those are not defined. The inferred type
will be &amp;ldquo;Map[Int, String]&amp;rdquo; in &lt;em&gt;tweetMap&lt;/em&gt;&amp;rsquo;s case,
and &amp;ldquo;Map[Int, Any]&amp;rdquo; in the second example, called &lt;em&gt;justAMap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The third example above will give an &amp;ldquo;&lt;em&gt;error: type mismatch&lt;/em&gt;&amp;rdquo;,
because we specified that we want to stores Ints
and Doubles in the map, but we tried to stuff in a String as a value.
Scala doesn&amp;rsquo;t let that happen.&lt;/p&gt;

&lt;h2 id=&#34;looking-up-a-value-for-a-key:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Looking up a value for a key&lt;/h2&gt;

&lt;p&gt;If you are coming from the Java world, your instinct might tell you to call a &lt;em&gt;get(key)&lt;/em&gt; function
on the map to access the corresponding value. It works, but probably in a bit different way than
you would expect.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;414&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// will return:&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// Some(&amp;quot;#scaladays are coming to Berlin!&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;get(key)&lt;/em&gt; function returns an &lt;em&gt;Option&lt;/em&gt; which is a special type, that I will explain in
the next post.&lt;/p&gt;

&lt;p&gt;For now, let&amp;rsquo;s use another, simpler way to access the value that belongs to a key:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;414&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// will return the String:&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// &amp;quot;#scaladays are coming to Berlin!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Nice, isn&amp;rsquo;t it? One downside of this method is that we will get a &amp;ldquo;key not found&amp;rdquo; error,
more precisely, a &amp;ldquo;NoSuchElementException&amp;rdquo; if we try to query a key that is not in our map.&lt;/p&gt;

&lt;h2 id=&#34;using-mutable-maps:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Using mutable Maps&lt;/h2&gt;

&lt;p&gt;Until now we had maps that were immutable. Because Scala, by default, imports
&amp;ldquo;scala.collection.immutable.Map&amp;rdquo; as &amp;ldquo;Map&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;But if we want to extend, or otherwise modify the contents of a map, we will need a mutable Map.
And we have to import it by:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scala.collection.mutable.Map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

After this import, a &amp;ldquo;Map&amp;rdquo; will mean a mutable map, insted of an immutable map.&lt;/p&gt;

&lt;p&gt;If you want to use both kinds of maps, then you can import both, and give them your own names like this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scala.collection.immutable.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ImmuMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scala.collection.mutable.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MuMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;MuMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MuMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;think&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In the example above we created a MuMap, which was empty at first, but then we added three pairs
using the &amp;ldquo;+=&amp;rdquo; operator and specifying the key-value pairs (those were separated by simple arrows: &amp;ldquo;-&amp;gt;&amp;rdquo;).&lt;/p&gt;

&lt;h2 id=&#34;iterating-over-all-elements-of-a-map:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Iterating over all elements of a Map&lt;/h2&gt;

&lt;p&gt;For this we can either use an &lt;em&gt;iterator&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mIter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;iterator&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mIter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mIter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This will print the tuples:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;think&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Or, we could use the &lt;em&gt;foreach&lt;/em&gt; method of the Map:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;todoMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kv&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;key: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;kv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, value: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;kv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To see this output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;write&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;think&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;summary-and-other-sources:4565879f8724d6874a5bcfe7b435e7b8&#34;&gt;Summary and other sources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tutorialspoint.com/scala/scala_maps.htm&#34;&gt;This page&lt;/a&gt; of TutorialsPoint lists more operations on Scala Maps.&lt;/p&gt;

&lt;p&gt;Scala offers more Map implementations, with different trade-offs regarding mutability, speed of operations, ordering, etc.
If you need advice on which one to choose,
&lt;a href=&#34;http://alvinalexander.com/scala/how-to-choose-map-implementation-class-sorted-scala-cookbook&#34;&gt;this guide&lt;/a&gt;
might help.&lt;/p&gt;

&lt;p&gt;Some runnable code examples are &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/05_maps&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next time I&amp;rsquo;ll briefly cover Scala&amp;rsquo;s special collection-like tool: &lt;em&gt;Option&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to learn about Scala&amp;rsquo;s &amp;ldquo;map()&amp;rdquo; function, with which you can simply apply a
function on each element of a list, then you have to wait for a yet-to-come post. Alternatively,
read &lt;a href=&#34;http://www.brunton-spall.co.uk/post/2011/12/02/map-map-and-flatmap-in-scala/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Feedback is welcome on &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt;
or on &lt;a href=&#34;https://github.com/hands-on-scala/hands-on-scala.github.io/issues/2&#34;&gt;GitHub&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala collections - part 2</title>
      <link>http://hands-on-scala.github.io/post/tuples/</link>
      <pubDate>Wed, 08 Jun 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/tuples/</guid>
      <description>

&lt;h1 id=&#34;basic-data-structures-in-scala-tuples:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;Basic data structures in Scala: Tuples&lt;/h1&gt;

&lt;p&gt;In the previous post we learned about &lt;a href=&#39;http://hands-on-scala.github.io/post/lists/&#39;&gt;Lists in Scala&lt;/a&gt;. Now I&amp;rsquo;ll briefly cover &lt;em&gt;tuples&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can think about a tuple as simple &amp;ldquo;wrapper&amp;rdquo; around a handful of things,
it just keeps its elements together, at their own place.&lt;/p&gt;

&lt;p&gt;Tuples are similar to lists in some ways, but there are also some key differences.&lt;/p&gt;

&lt;p&gt;It is also worth noting that strictly speaking, a tuple is not a &lt;em&gt;Scala collection&lt;/em&gt;, because
it&amp;rsquo;s not one of the classes that implement the necessary functionality to be called a real collection.&lt;/p&gt;

&lt;h2 id=&#34;what-are-they-good-for:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;What are they good for?&lt;/h2&gt;

&lt;p&gt;So why is it handy that we can wrap a couple of things together?&lt;/p&gt;

&lt;p&gt;Well, if you are a Java developer then you probably know how annoying
it is when you have to create a custom new class just to be able to
return more than one value that have been computed together within a method.&lt;/p&gt;

&lt;p&gt;Tuples provide a very ligth-weight tool to pass around a small group
of values together.&lt;/p&gt;

&lt;h2 id=&#34;creating-tuples:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;Creating tuples&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see two quick examples:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myFirstTuple&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:Double&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42.0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mySecondTuple&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Scala&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Creating a tuple is as easy as listing its elements, separated by commas,
and wrap all this in parentheses.
No special keyword is needed.&lt;/p&gt;

&lt;p&gt;As &lt;em&gt;Lists&lt;/em&gt;, tuples also keep the order of their elements, and duplicates among the elements are allowed.&lt;/p&gt;

&lt;p&gt;Tuples are always &lt;em&gt;immutable&lt;/em&gt;, there&amp;rsquo;s no way to change their elements.&lt;/p&gt;

&lt;h3 id=&#34;first-difference-from-list-types-of-elements:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;First difference from List: types of elements&lt;/h3&gt;

&lt;p&gt;As you may remember, Lists were used to hold elements of the same type. It might not be obvious,
because of Scala&amp;rsquo;s smart automatic type inference, but if you put all kinds of things into a List, like here:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

then the &amp;ldquo;myList&amp;rdquo; will be of type &lt;em&gt;List[Any]&lt;/em&gt; (because &lt;em&gt;Any&lt;/em&gt; is the &amp;ldquo;mother-of-all&amp;rdquo; type in Scala; as is &lt;em&gt;Object&lt;/em&gt; in Java).
So, from this point of view, this &amp;ldquo;myList&amp;rdquo; still contains elements of the same type!&lt;/p&gt;

&lt;p&gt;On the other hand, tuples were designed to hold different types of objects.
The type description of &amp;ldquo;mySecondTuple&amp;rdquo; from the first example, will be:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Char&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;second-difference-from-lists-allowed-length:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;Second difference from Lists: allowed length&lt;/h3&gt;

&lt;p&gt;List could be of any length. But there is an upper limit for the number of elements in a tuple: it&amp;rsquo;s 22. (Don&amp;rsquo;t ask me why.)&lt;/p&gt;

&lt;p&gt;Trying to create a tuple with 23 or more elements will lead to an error. But 22 items is well enough.&lt;/p&gt;

&lt;h3 id=&#34;third-difference-from-lists-indexing:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;Third difference from Lists: indexing&lt;/h3&gt;

&lt;p&gt;Lists (and usually all kinds of collections) index their elements starting from zero.
But tuples are different: their elements are indexed from one.&lt;/p&gt;

&lt;p&gt;The syntax is also a bit weird, you need a dot plus an underscore between the tuple and the index.&lt;/p&gt;

&lt;p&gt;Some examples of referencing tuple elements:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tupleTweet&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;johhnny&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;531523L&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello, Mom!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tupleTweet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_1&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tupleTweet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_2&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tupleTweet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// johhnny: Hello, Mom!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;smart-usage:ed70a7fca0aa43af9c02ad245a8d5581&#34;&gt;Smart usage&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say we have a function that returns three values in a tuple:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getTweetData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Long&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// should get data from database,&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// instead a dummy solution&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;angie&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;It&amp;#39;s my birthday!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;tony&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Rainbows! :)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;zoe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;More rainbows! :)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And then, where we call this function, we want to give the elements from the tuple separate value names.&lt;/p&gt;

&lt;p&gt;The first solution that we may think of is with using indices, but it&amp;rsquo;s quite clumsy. Instead,
we can simply list the desired variable names on the left side of the assingment operator, like in this example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getTweetData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Name is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, age:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Moreover, if you don&amp;rsquo;t care about some values (for example, the age is not important), then you can use
a wildcard operator, an underscore (again) in its place:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getTweetData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Name is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, message is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then you&amp;rsquo;ll get only two new values after the assignment in the first line, instead of three.&lt;/p&gt;

&lt;p&gt;You can find more examples on &lt;a href=&#34;http://www.tutorialspoint.com/scala/scala_tuples.htm&#34;&gt;TutorialsPoint&lt;/a&gt;
and in &lt;a href=&#34;http://alvinalexander.com/scala/scala-tuple-examples-syntax&#34;&gt;Alvin Alexandes&amp;rsquo;s blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala collections - part 1</title>
      <link>http://hands-on-scala.github.io/post/lists/</link>
      <pubDate>Fri, 27 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/lists/</guid>
      <description>

&lt;h1 id=&#34;basic-data-structures-in-scala-lists:d0d52187982e6552701534a118e51bf4&#34;&gt;Basic data structures in Scala: Lists&lt;/h1&gt;

&lt;p&gt;In the following couple of posts we&amp;rsquo;ll learn about basic data structures,
and how they can be used in Scala.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lists&lt;/em&gt; are what their name suggests: they can keep a list of things. The order
of its elements will be kept,
and a list does not care if an element appears more than once in it.&lt;/p&gt;

&lt;h2 id=&#34;creating-immutable-lists:d0d52187982e6552701534a118e51bf4&#34;&gt;Creating (immutable) lists&lt;/h2&gt;

&lt;p&gt;As it can be read in the &lt;a href=&#34;http://docs.scala-lang.org/overviews/collections/overview.html&#34;&gt;Scala collections overview&lt;/a&gt;,
collections in Scala can either be mutable or immutable. The default is the
immutable version, so when we say &amp;ldquo;List&amp;rdquo; or &amp;ldquo;scala.List&amp;rdquo; it will be traslated to &amp;ldquo;scala.collection.immutable.List&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myIntList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;324&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myStrList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Scala&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myNumList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.727&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;61&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myAnyList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;42.9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see in the third line from above, Scala allows you to
have a List that keeps things of different types.&lt;/p&gt;

&lt;p&gt;So, the types from the above code snippet will be:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;myIntList&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;myStrList&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;myNumList&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;myAnyList&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note that if you dont&amp;rsquo;t specify the type of your list,
then the Scala engine (interpreter or compiler) will  infer the type for you. It will search the closest
common ancestor type of the elements of the list, and assign that as the type of the list.
( We&amp;rsquo;ll learn more about the Scala type hierarchy later.)&lt;/p&gt;

&lt;p&gt;Another approach to creating lists is using the Lisp-style &lt;em&gt;cons&lt;/em&gt; operator, &amp;ldquo;::&amp;rdquo; that concatenates elements to a list,
and at the end you need to close the list with a &amp;ldquo;Nil&amp;rdquo; value.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;anotherIntList1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Nil&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;anotherIntList2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above two lines will created equivalent lists, that have the same elements.&lt;/p&gt;

&lt;h3 id=&#34;specifying-the-type-of-the-list:d0d52187982e6552701534a118e51bf4&#34;&gt;Specifying the type of the list&lt;/h3&gt;

&lt;p&gt;If you would like to direcly specify the type of your list (restrict the type of the elements it will be able to hold), you can do it as well:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myIntList1&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myIntList2&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4.54&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The creation of &amp;ldquo;myIntList2&amp;rdquo; will fail with a  &lt;em&gt;&amp;ldquo;type mismatch&amp;rdquo; error&lt;/em&gt;, because we tried to put a Double
value into a List of integers, and it simply does not fit there.&lt;/p&gt;

&lt;h2 id=&#34;concatenation-and-appending-elements:d0d52187982e6552701534a118e51bf4&#34;&gt;Concatenation and appending elements&lt;/h2&gt;

&lt;p&gt;The lists we created above are &lt;em&gt;immutable&lt;/em&gt;, you can not change them.&lt;/p&gt;

&lt;p&gt;If you want to extend a list, there are operations for that, but what
will happen under the hood is that you will be given a completely new list with the extended contents and the original
list will remain intact. This might be important when dealing with long lists and where efficiency is important.&lt;/p&gt;

&lt;p&gt;We can concatenate two existing lists with the &lt;em&gt;concat&lt;/em&gt; method of &lt;em&gt;List&lt;/em&gt;, or with the triple cons operator:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list2&lt;/span&gt;   &lt;span style=&#34;color: #75715e&#34;&gt;// will be the same as &amp;#39;all1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And this is how you mimic appending a new element at the end of an immutable list: you create a new list,
which is a concatenation of the original and a new list with only one element:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list3&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;extendedList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;basic-operations-on-lists:d0d52187982e6552701534a118e51bf4&#34;&gt;Basic operations on Lists&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll just show a handful of basic functions: how to get the &lt;em&gt;length&lt;/em&gt; of a list, that is, the number of its elements; and how to
check if it&amp;rsquo;s empty, or if it contains an element, and at which position.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// prints &amp;quot;4&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;     &lt;span style=&#34;color: #75715e&#34;&gt;// first element (at index 0): &amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;     &lt;span style=&#34;color: #75715e&#34;&gt;// second element (index 1): &amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;// prints &amp;#39;false&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fromPosition&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;indexOf&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fromPosition&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;   &lt;span style=&#34;color: #75715e&#34;&gt;// prints &amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget that you can refer to individual elements of a list by
putting their index position in simple parantheses after the list&amp;rsquo;s name,
and element indices start from zero.&lt;/p&gt;

&lt;h2 id=&#34;other-operations-on-lists:d0d52187982e6552701534a118e51bf4&#34;&gt;Other operations on Lists&lt;/h2&gt;

&lt;p&gt;These built-in functions highlight some very useful capabilities of lists in Scala.
I won&amp;rsquo;t explain them one by one, because their names are quite descriptive; but lets&amp;rsquo;s see the examples
as part of a runnable App.
I insert a bit longer code snippet, but I hope it&amp;rsquo;s easy to follow.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ListExamples&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Long&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;isIdPositive&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tw&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0L&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printUserAndMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tw&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; tweeted: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;adri&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;adorster&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user3&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stern&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;94432L&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello data&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;513454L&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello science&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;68435L&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello data science&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList1&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; 

    &lt;span style=&#34;color: #75715e&#34;&gt;// filter&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filteredList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;isIdPositive&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Filtered list is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filteredList&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;  

    &lt;span style=&#34;color: #75715e&#34;&gt;// forall&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;trueOfFalse1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forall&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;isIdPositive&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;All id numbers positive? &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;trueOfFalse1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;trueOfFalse2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forall&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;isIdPositive&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;All id numbers positive? &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;trueOfFalse2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color: #75715e&#34;&gt;// foreach&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;printUserAndMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// intersect&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList2&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;intersectList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;intersect&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Intersected list is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;intersectList&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// distinct&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList3&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;t2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;distinctList&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweetList3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;distinct&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Distinct list is: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;distinctList&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;More operations are listed &lt;a href=&#34;http://www.tutorialspoint.com/scala/scala_lists.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want  to play with the code examples above, you can clone my git repo from &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/03_lists&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary-and-what-s-coming-next:d0d52187982e6552701534a118e51bf4&#34;&gt;Summary and what&amp;rsquo;s coming next&lt;/h2&gt;

&lt;p&gt;In the next post we&amp;rsquo;ll cover Scala&amp;rsquo;s &lt;a href=&#39;http://hands-on-scala.github.io/post/tuples/&#39;&gt;tuples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re very impatient, check out &lt;a href=&#34;https://twitter.github.io/scala_school/collections.html&#34;&gt;collections in Twitter&amp;rsquo;s Scala School&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are curious about the more advanced topic of the &lt;em&gt;performance&lt;/em&gt; characteristics of these types,
&lt;a href=&#34;http://docs.scala-lang.org/overviews/collections/performance-characteristics.html&#34;&gt;see a summary here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our first Scala dojo</title>
      <link>http://hands-on-scala.github.io/post/dojo1/</link>
      <pubDate>Fri, 20 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/dojo1/</guid>
      <description>

&lt;h1 id=&#34;what-is-a-coding-dojo:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;What is a coding dojo?&lt;/h1&gt;

&lt;p&gt;In short, a coding dojo is an event where a group of programmers practice their craft in an organized way, focusing on a single coding problem.&lt;/p&gt;

&lt;p&gt;A dojo usually lasts a couple of hours, depending on the style and the task to be solved.&lt;/p&gt;

&lt;p&gt;For more details see &lt;a href=&#34;http://codingdojo.org/cgi-bin/index.pl?WhatIsCodingDojo&#34;&gt;CodingDojo.org&lt;/a&gt; or
&lt;a href=&#34;http://code.joejag.com/2009/the-coding-dojo.html&#34;&gt;Joe Wright&amp;rsquo;s blog post about coding dojos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We usually do a &lt;em&gt;Randori Kata&lt;/em&gt; version, where the task is solved by a team of 4-6 people, who take 5-7 minute turns in pairs.&lt;/p&gt;

&lt;p&gt;The task and the programming language is chosen in advance by one of us, or even better by a pair of dojo organizers.
The organizers prepare the event by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determining the general goal of the dojo. It should be NOT that the team should finish the task, but learning or practicing something!
(e.g.: following strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;,
focusing on careful planning, or learning a new language feature).&lt;/li&gt;
&lt;li&gt;Selecting a specific programming task that fits well the above goal.&lt;/li&gt;
&lt;li&gt;Solving the task before the real dojo, to check the difficulty and to be able to help out during the real dojo.&lt;/li&gt;
&lt;li&gt;Possibly re-defining the task or giving additional hints to the task description if needed.
&lt;!--, somewhat tailored to the skills of the team mebers
who signed up for the dojo.--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-task:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;The task&lt;/h2&gt;

&lt;p&gt;For the very first Scala coding dojo, I chose a simple task, because many of us was in an early phase of learning Scala.
The team had to implement a &lt;em&gt;grader&lt;/em&gt; application, that assigns marks (from &amp;lsquo;F&amp;rsquo; to &amp;lsquo;A&amp;rsquo;) to an integer score.&lt;/p&gt;

&lt;p&gt;The full description is available on &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/01_grader_app&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;give-it-a-try:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;Give it a try!&lt;/h2&gt;

&lt;p&gt;Try to solve this problem! It&amp;rsquo;s the most useful if you have some team-mates to practice &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair programming&lt;/a&gt;
as well, but it&amp;rsquo;s not a requirement, you can do it by yourself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the GitHub repo with the task description also holds a solution, so be careful when looking around if you don&amp;rsquo;t want to cheat! :)&lt;/p&gt;

&lt;p&gt;If you get stuck, it might help to read my
previous posts about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/enums/&#34;&gt;enumerations in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/testing1/&#34;&gt;testing in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/patternmatch1/&#34;&gt;pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or just use good ol&amp;rsquo; Google :)&lt;/p&gt;

&lt;h2 id=&#34;the-team-s-solution:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;The team&amp;rsquo;s solution&lt;/h2&gt;

&lt;p&gt;A solution can be found in the GitHub repo mentioned above.&lt;/p&gt;

&lt;h2 id=&#34;what-we-learned:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;What we learned&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s really worth to take some time at the end of a dojo to review
how it worked out, did we enjoy it, what we learned?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s probably different for each of us, but we always learn from each other.
Sometimes it&amp;rsquo;s just a new keystroke-combination of the
IDE that we use for development. Other times it&amp;rsquo;s a convenient feature of the programming language,
or a new approach for the task.&lt;/p&gt;

&lt;p&gt;It also happens that we learn something more &amp;lsquo;personal&amp;rsquo;: that YX is really fun to work with, or that
maybe YZ is afraid to go out to the whiteboard, but when working in pairs, (s)he opens up and has really brilliant ideas.&lt;/p&gt;

&lt;p&gt;In this specific case I learned how to measure code coverage in the Eclipse-based &lt;a href=&#34;http://scala-ide.org/&#34;&gt;Scala IDE&lt;/a&gt;, and of course, how Enumerations
can be used in Scala.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing our Scala code</title>
      <link>http://hands-on-scala.github.io/post/testing1/</link>
      <pubDate>Fri, 13 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/testing1/</guid>
      <description>

&lt;h1 id=&#34;why-test-our-code:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Why test our code?&lt;/h1&gt;

&lt;p&gt;This is a more &amp;lsquo;practical&amp;rsquo; topic, and I&amp;rsquo;m sure that many would argue
that learning how to use a unit testing framework is not strictly necessary
for newcomers. But according to my experience, getting into the
habit of writing tests regularly quickly pays off.&lt;/p&gt;

&lt;p&gt;Why? It&amp;rsquo;s nicely summarized &lt;a href=&#34;http://blog.xebia.com/5-reasons-why-you-should-test-your-code/&#34;&gt;here&lt;/a&gt;, I&amp;rsquo;m
just listing here the main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Regression Testing&lt;/li&gt;
&lt;li&gt;Improve The Implementation Via New Insights&lt;/li&gt;
&lt;li&gt;It Saves Time, Really&lt;/li&gt;
&lt;li&gt;Self-Updating Documentation&lt;/li&gt;
&lt;li&gt;It Is Fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;testing-frameworks-for-scala:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Testing frameworks for Scala&lt;/h1&gt;

&lt;p&gt;In Scala, you basically have two main-stream options if you want to write unit tests for your code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scalatest.org&#34;&gt;ScalaTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://etorreborre.github.io/specs2/&#34;&gt;Specs2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll explore the first one, the ScalaTest framework in this short post, through some basic examples.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-test-with-scalatest:6473280be67b92290b8d1101a0ce93d9&#34;&gt;A simple test with ScalaTest&lt;/h2&gt;

&lt;p&gt;To use ScalaTest we need to add it as a dependency to our &lt;em&gt;build.sbt&lt;/em&gt; file in the root of our
sbt project. (Note: If you don&amp;rsquo;t know how to set up a Scala project with SBT, you can find help &lt;a href=&#34;http://hands-on-scala.github.io/post/setup/&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to extend our initial &lt;em&gt;build.sbt&lt;/em&gt; with a new &lt;em&gt;libraryDepencencies&lt;/em&gt; part.
(&lt;em&gt;Note:&lt;/em&gt; If you already had dependencies in the libraryDependencies section, then just add a new line
to let SBT know that we want to use the ScalaTest framework. But be careful,
all, but the last line within the &lt;em&gt;Seq&lt;/em&gt; should end in a comma!)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_tested_app&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exportJars&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;scalaVersion&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2.11.7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;libraryDependencies&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;++=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;org.scalatest&amp;quot;&lt;/span&gt;       &lt;span style=&#34;color: #f92672&#34;&gt;%%&lt;/span&gt;  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;scalatest&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2.2.6&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

In the above example, we tell SBT that we want to use the ScalaTest framework, version 2.6.6, so it
will download all the necessary things at the first subsequent &lt;em&gt;&amp;lsquo;sbt build&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt run&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;where-do-we-put-our-test-codes:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Where do we put our test codes?&lt;/h3&gt;

&lt;p&gt;Usually another directory with the name &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; is created next to the &lt;em&gt;&amp;lsquo;main&amp;rsquo;&lt;/em&gt; source folder
within the project&amp;rsquo;s &lt;em&gt;&amp;lsquo;src&amp;rsquo;&lt;/em&gt; folder, that contains all the source codes. Inside these, a parallel directory
structure is used to hold the &lt;em&gt;packages&lt;/em&gt; which group together our scala files. (More about packages in a later post.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/02_pattern_match_app/src&#34;&gt;See an example here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use this standard layout for your source codes, then SBT will automatically explore
your tests, and you&amp;rsquo;ll be able to run all of them simply via the &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command. But we jumped a bit ahead :)&lt;/p&gt;

&lt;p&gt;At first let&amp;rsquo;s write a test. We need to create a new file within the &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; directory.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.scalatest.FlatSpec&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FlatSpec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This example test&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s save it as &lt;em&gt;&amp;lsquo;src/test/scala/MyFirstTest.scala&amp;rsquo;&lt;/em&gt; within your project folder.&lt;/p&gt;

&lt;h3 id=&#34;running-our-tests:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Running our tests&lt;/h3&gt;

&lt;p&gt;And now let&amp;rsquo;s see if it works: type into the console, while in the root of your SBT project:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sbt &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Of course, the above test will fail:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;...
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; *** &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; TEST FAILED ***
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;error&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Failed tests:
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;error&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; 	MyTest
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;error&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;test:test&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; sbt.TestsFailedException: Tests unsuccessful
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;error&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Total time: &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; s, completed May 13, &lt;span style=&#34;color: #ae81ff&#34;&gt;2016&lt;/span&gt; 6:00:22 PM
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Because&amp;hellip; oh yes, 1+2 does not equal to 2. I just wanted to show a failing test at first. Now let&amp;rsquo;s fix it, and maybe add another test:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.scalatest.FlatSpec&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FlatSpec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This example test&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This second example test&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;also pass&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After re-running &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt;:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; MyTest:
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; This example &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; - should pass
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; This second &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; - should also pass
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Run completed in &lt;span style=&#34;color: #ae81ff&#34;&gt;216&lt;/span&gt; milliseconds.
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Total number of tests run: 2
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Suites: completed 1, aborted 0
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; All tests passed.
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;success&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; Total time: &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt; s, completed May 13, &lt;span style=&#34;color: #ae81ff&#34;&gt;2016&lt;/span&gt; 6:08:34 PM
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/blob/master/02_pattern_match_app/src/test/scala/pmatching/MatcherTest.scala&#34;&gt;Another example&lt;/a&gt;,
related to the last example of &lt;a href=&#34;http://hands-on-scala.github.io/post/patternmatch1/&#34;&gt;the previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic pattern matching in Scala</title>
      <link>http://hands-on-scala.github.io/post/patternmatch1/</link>
      <pubDate>Fri, 06 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/patternmatch1/</guid>
      <description>

&lt;h1 id=&#34;introduction-to-pattern-matching-in-scala:709c56cceaa353d481f380974d67f3c0&#34;&gt;Introduction to pattern matching in Scala&lt;/h1&gt;

&lt;p&gt;Pattern matching is a quite commonly used &amp;ldquo;programming pattern&amp;rdquo; in functional languages, because it
fits nicely into the &amp;ldquo;functional way of thinking&amp;rdquo;, and it is quite powerful and handy as a tool.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s somewhat similar to a sequence of &lt;em&gt;if / else&lt;/em&gt; statements or to the &lt;em&gt;switch&lt;/em&gt; statement
of Java or C, but it is much more powerful, because it lets you form more complex
conditions for matching, even for the inside of an object.&lt;/p&gt;

&lt;p&gt;In some cases
&lt;!-- (when dealing with objects of _case classes_ for example; we&#39;ll learn about them a bit later in more detail) --&gt;
Scala can automatically &lt;em&gt;decompose&lt;/em&gt; an object that you want to match and look inside it to check
if its structure matches your expectations.&lt;/p&gt;

&lt;!--This means 
that you can apply rules based on the object&#39;s type or inner structure without having 
to manually disassemble the object into its parts.--&gt;

&lt;p&gt;But, before going too deep, let&amp;rsquo;s see some examples.&lt;/p&gt;

&lt;h2 id=&#34;example-1-matching-value:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 1: matching value&lt;/h2&gt;

&lt;p&gt;Here the object what we match to patterns is &lt;em&gt;x&lt;/em&gt;, an integer.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MatchTest1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matchTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;many&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;matchTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Fairly simple, isn&amp;rsquo;t it? Just use the &lt;em&gt;match&lt;/em&gt; keyword after the name of the
thing you&amp;rsquo;ll want to match, and list your cases within curly braces.
The match expression in our case will return the value that appears on the right side of the &amp;lsquo;=&amp;gt;&amp;rsquo; arrow, corresponding
to the first matching case. So the order of the _case_s will matter if there is some overlap among the left sides of the arrows!&lt;/p&gt;

&lt;p&gt;One importatnt thing to note is the last case where an underscore is used: this is Scala&amp;rsquo;s notation
for &amp;ldquo;match anything&amp;rdquo;. Without this line, we would get a &amp;ldquo;scala.MatchError&amp;rdquo; because we called
the &lt;em&gt;matchTest()&lt;/em&gt; function with the value 3, which is not covered by the other &lt;em&gt;case&lt;/em&gt; branches.&lt;/p&gt;

&lt;p&gt;So the main point to remember from here is that you should be sure to cover all
possible options when using a &lt;em&gt;match&lt;/em&gt; expression if you want to avoid ugly errors.
The fail-safe option usually is to use the underscore as the last &lt;em&gt;case&lt;/em&gt;.
It will define a default path for the program flow for &amp;ldquo;all other cases&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;(Note: I just copied this example from the
&lt;a href=&#34;http://docs.scala-lang.org/tutorials/tour/pattern-matching.html&#34;&gt;official documentation&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;example-2-matching-type:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 2: matching type&lt;/h2&gt;

&lt;p&gt;If we want to write a function that behaves differently for different input &lt;em&gt;types&lt;/em&gt;, we can write something like:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I don&amp;#39;t know&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

The main difference from the previous example is that now we used &lt;em&gt;&amp;ldquo;x: Type&amp;rdquo;&lt;/em&gt; instead of a specified value on the left side
of the arrow, after the &lt;em&gt;case&lt;/em&gt; keyword. It&amp;rsquo;s still simple :)&lt;/p&gt;

&lt;p&gt;Note 1: &amp;ldquo;&lt;em&gt;Any&lt;/em&gt;&amp;rdquo; is a general type in Scala, similar to the &amp;ldquo;&lt;em&gt;Object&lt;/em&gt;&amp;rdquo; of Java, which is an ancestor of all other types.&lt;/p&gt;

&lt;p&gt;Note 2: You don&amp;rsquo;t need to use the same value name in the cases, because each
case has its own scope with regards of the incoming
object to be matched. Just be sure to use the same name on both sides of the arrow within a case line.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getType2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;String: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Int: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I don&amp;#39;t know&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;example-3-using-guards:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 3: using guards&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say we need some extra conditions to be true before applying the right side of a &lt;em&gt;case&lt;/em&gt;.
Scala lets us perform these additional checks within any of the cases independently, as in the
following example:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getType3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;a.startsWith&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;He&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;String with &amp;#39;He&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Positive integer&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I don&amp;#39;t know&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

These additional conditions before the cases&amp;rsquo; arrows are called &amp;ldquo;guards&amp;rdquo;.
If they are evaluated to false, then
the corresponding case branch is considered not matching, so the next case will be tried.&lt;/p&gt;

&lt;h2 id=&#34;example-4-matching-structure:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 4: matching structure&lt;/h2&gt;

&lt;p&gt;I promised in the first paragraph that in some cases we will be able to
&amp;ldquo;automatically &lt;em&gt;decompose&lt;/em&gt; an object&amp;rdquo; to look inside it and check
if its structure matches our expectations.&lt;/p&gt;

&lt;p&gt;How does it work in Scala, and what are the prerequisites?&lt;/p&gt;

&lt;p&gt;The answer is: &lt;em&gt;case classes&lt;/em&gt;! My next blog post will cover them in more detail.
For now let&amp;rsquo;s think about a case class as a composite object with some
auto-magic: automatically generated constructors and getters, for example.&lt;/p&gt;

&lt;p&gt;For the more curious, here are
&lt;a href=&#34;http://stackoverflow.com/questions/2312881/what-is-the-difference-between-scalas-case-class-and-class%29&#34;&gt;some nice and short explanations&lt;/a&gt;, and the official (quite dense) &lt;a href=&#34;http://docs.scala-lang.org/tutorials/tour/case-classes.html&#34;&gt;description of case classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for an example of automatic decomposition, at first we need a
case class. We&amp;rsquo;ll write one, representing a tweet message, that has three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an identifier (&lt;em&gt;id: Long&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;an author (&lt;em&gt;author: User&lt;/em&gt;, that itself could be a complex case class, now it only contains one String, a name)&lt;/li&gt;
&lt;li&gt;a message (&lt;em&gt;msg: String&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defining these new types (&lt;em&gt;User&lt;/em&gt; and &lt;em&gt;TweetMsg&lt;/em&gt;) in Scala takes only two fairly short lines:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Long&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now a function can match a tweet&amp;rsquo;s inners like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;processTweet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tweet&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweet&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Invalid (negative) tweet id!&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TweetMsg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;adorster&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Just another tweet&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Example codes with tests are available at &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/02_pattern_match_app&#34;&gt;my scala-examples github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note n+1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enums in Scala</title>
      <link>http://hands-on-scala.github.io/post/enums/</link>
      <pubDate>Fri, 29 Apr 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/enums/</guid>
      <description>

&lt;h1 id=&#34;enumerations-in-scala:1ef00569cd8c4dbcb2b9bfd22661e936&#34;&gt;Enumerations in Scala&lt;/h1&gt;

&lt;p&gt;Generally in programming, enumerations (a.k.a. enums)
are light-weight means to create a very simple model within our code, for
representing a custom type with a limited set of possible values with readable
names.
This description might sound a bit too abstract, so
let&amp;rsquo;s see an example instead.&lt;/p&gt;

&lt;h2 id=&#34;example-days-of-week:1ef00569cd8c4dbcb2b9bfd22661e936&#34;&gt;Example: days of week&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s introduce an enum for representing the days of week.
In Scala, you have to create an &lt;em&gt;object&lt;/em&gt; for this, which
needs to extend Scala&amp;rsquo;s &lt;em&gt;Enumeration&lt;/em&gt; trait (we&amp;rsquo;ll learn more about objects
and traits later).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DayOfWeek&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Enumeration&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Sun&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Mon&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Wed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Thu&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Fri&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Sat&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it&amp;rsquo;s almost as easy as listing the possible values,
separated by commas. But don&amp;rsquo;t forget the &amp;ldquo;val&amp;rdquo; from the beginning and
the &amp;ldquo; = Value&amp;rdquo; part from the end of the value list, because without them,
your shiny new enum will not work.&lt;/p&gt;

&lt;p&gt;After defining this new enum in our code
we can start using days of week (after importing them!) as in the
following example:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DayOfWeek._&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Mon&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And this tiny program will print the string &amp;ldquo;Mon&amp;rdquo; to the screen. Try it!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also easy to loop over all possible values of an enum:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DayOfWeek&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;day&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;day&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;In the next post, we&amp;rsquo;ll see how to use enum values when using pattern matching in Scala.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Short intro to Scala</title>
      <link>http://hands-on-scala.github.io/post/setup/</link>
      <pubDate>Fri, 22 Apr 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/setup/</guid>
      <description>

&lt;h1 id=&#34;welcome:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Welcome!&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;re probably here because you&amp;rsquo;ve heard that Scala is a cool programming language
that you&amp;rsquo;d like to learn. Because, hey, it&amp;rsquo;s object-oriented and functional at the same time!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll show you something very basic at first: a bit more &amp;ldquo;personal&amp;rdquo; version
of the famous
&lt;a href=&#34;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&#34;&gt;&amp;ldquo;Hello World&amp;rdquo; program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following little Scala program will ask for your name and then it&amp;rsquo;ll print &amp;ldquo;Hello, &lt;You&gt;!&amp;rdquo; to the console.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;WordApp&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scala&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;StdIn&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;What&amp;#39;s your name? \n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case this is really your very first Scala program,
you might ask: how do I make the above example &lt;em&gt;App&lt;/em&gt; come alive?
Well, you have more than one option. (Btw, you&amp;rsquo;ll have to get used to this in the world of Scala &amp;ndash; usually there is more than one way to do things. I admit that this fact is not very
beginner-friendly, but later it will come handy.)&lt;/p&gt;

&lt;p&gt;At first let&amp;rsquo;s not complicate things with IDEs and GUIs, let&amp;rsquo;s just use the
console tools available. Another post will show you how to use Eclipse or IntelliJ IDEA for
Scala development.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-our-first-scala-project-with-sbt:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Setting up our first Scala project with SBT&lt;/h2&gt;

&lt;p&gt;SBT stands for the &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;&amp;ldquo;Scala Build Tool&amp;rdquo;&lt;/a&gt;. It&amp;rsquo;s like &amp;lsquo;gradle&amp;rsquo; or &amp;lsquo;maven&amp;rsquo; for Java.
If you are not familiar with build tools, then consult the Internet :)&lt;/p&gt;

&lt;h3 id=&#34;installing-sbt:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Installing SBT&lt;/h3&gt;

&lt;p&gt;Check the latest install documentation here:
&lt;a href=&#34;http://www.scala-sbt.org/release/docs/Setup.html&#34;&gt;http://www.scala-sbt.org/release/docs/Setup.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-the-hello-project:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Creating the &amp;ldquo;Hello&amp;rdquo; project&lt;/h3&gt;

&lt;p&gt;It won&amp;rsquo;t be as painful as it might seem at first :)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really just two steps writing the source files to an appropriate location,
and give some hints to SBT about how it should do its work.&lt;/p&gt;

&lt;h4 id=&#34;the-source-tree:2cc0b07f42930e4520820be1fe66f913&#34;&gt;The source tree&lt;/h4&gt;

&lt;p&gt;SBT expects the source Scala files (and tests, but we won&amp;rsquo;t have any for now) to be
in a specific folder. So, let&amp;rsquo;s go ahead and create them (I&amp;rsquo;m assuming you have
soma basic experience with the Linux command line):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir -p src/main/scala
mkdir -p src/test/scala
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within these two directories we&amp;rsquo;ll usually have somewhat parallel sub-directories
with packages for our main source files and tests. Now we won&amp;rsquo;t have any packages or tests,
for simplicity.&lt;/p&gt;

&lt;p&gt;The source file we&amp;rsquo;ll edit must be in the &amp;ldquo;src/main/scala/&amp;rdquo; folder. Let&amp;rsquo;s name it
&amp;ldquo;App.scala&amp;rdquo;. (You can use another name, but it wouldn&amp;rsquo;t be a good idea to change
the &amp;ldquo;.scala&amp;rdquo; extension.)
And its contents, as above:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;WordApp&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scala&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;StdIn&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;What&amp;#39;s your name? \n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

So, just save this into a file &amp;ldquo;src/main/scala/App.scala&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;the-build-sbt-file:2cc0b07f42930e4520820be1fe66f913&#34;&gt;The &amp;ldquo;build.sbt&amp;rdquo; file&lt;/h4&gt;

&lt;p&gt;This little confg-like file will set some useful settings for your project,
and also contains a list of dependencies.&lt;/p&gt;

&lt;p&gt;It should be saved to the top-level directory of your project, next to the &amp;ldquo;src&amp;rdquo; folder.&lt;/p&gt;

&lt;p&gt;And its contents:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;01_grader_app&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;exportJars&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;scalaVersion&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2.11.8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note the empty lines! Looks stupid, but they are actually necessary, if you are
using an older SBT version, prior to 0.13.7.
(&lt;a href=&#34;http://stackoverflow.com/questions/21780787/why-does-sbt-version-%E2%89%A4-0-13-6-require-blank-lines-between-settings-in-sbt-fil&#34;&gt;Here&lt;/a&gt; is an explanation.)&lt;/p&gt;

&lt;p&gt;To check which version you have, run:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sbt &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;inspect sbtVersion&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;With newer versions (from 0.13.7 up) you don&amp;rsquo;t need the empty lines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://scalatutorials.com/beginner/2013/07/18/getting-started-with-sbt/&#34;&gt;More help with SBT&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-run-it-already:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Let&amp;rsquo;s run it already!&lt;/h3&gt;

&lt;p&gt;Standing in the root of your project, just say:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sbt run
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I hope it works for all of you now! :)&lt;/p&gt;

&lt;h3 id=&#34;more-things-to-read:2cc0b07f42930e4520820be1fe66f913&#34;&gt;More things to read&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The official Scala site: &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;www.scala-lang.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SBT: &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;www.scala-sbt.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>