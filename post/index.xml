<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hands-on Scala Blog</title>
    <link>http://hands-on-scala.github.io/post/</link>
    <description>Recent content in Posts on Hands-on Scala Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 May 2016 17:30:00 +0200</lastBuildDate>
    <atom:link href="http://hands-on-scala.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Our first Scala dojo</title>
      <link>http://hands-on-scala.github.io/post/dojo1/</link>
      <pubDate>Fri, 20 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/dojo1/</guid>
      <description>

&lt;h1 id=&#34;what-is-a-coding-dojo:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;What is a coding dojo?&lt;/h1&gt;

&lt;p&gt;In short, a coding dojo is an event where a group of programmers practice their craft in an organized way, focusing on a single coding problem.&lt;/p&gt;

&lt;p&gt;A dojo usually lasts a couple of hours, depending on the style and the task to be solved.
For more details see &lt;a href=&#34;http://codingdojo.org/cgi-bin/index.pl?WhatIsCodingDojo&#34;&gt;CodingDojo.org&lt;/a&gt; or
&lt;a href=&#34;http://code.joejag.com/2009/the-coding-dojo.html&#34;&gt;Joe Wright&amp;rsquo;s blog post about coding dojos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We usually do a &lt;em&gt;Randori Kata&lt;/em&gt; version, where the task is solved by a team of 4-6 people, who take 5-7 minute turns in pairs.&lt;/p&gt;

&lt;p&gt;The task and the programming language is chosen in advance by one of us, or even better by a pair of dojo organizers.
The organizers prepare the event by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determining the general goal of the dojo. It should be NOT that the team should finish the task, but learning or practicing something!
(e.g.: following strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;,
focusing on careful planning, or learning a new language feature).&lt;/li&gt;
&lt;li&gt;Selecting a specific programming task that fits well the above goal.&lt;/li&gt;
&lt;li&gt;Solving the task before the real dojo, to check the difficulty and to be able to help out during the real dojo.&lt;/li&gt;
&lt;li&gt;Possibly re-defining the task or giving additional hints to the task description if needed.
&lt;!--, somewhat tailored to the skills of the team mebers
who signed up for the dojo.--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-task:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;The task&lt;/h2&gt;

&lt;p&gt;For the very first Scala coding dojo, I chose a simple task, because many of us was in an early phase of learning Scala.
The team had to implement a &lt;em&gt;grader&lt;/em&gt; application, that assigns marks (from &amp;lsquo;F&amp;rsquo; to &amp;lsquo;A&amp;rsquo;) to an integer score.&lt;/p&gt;

&lt;p&gt;The full description is available on &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/01_grader_app&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;give-it-a-try:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;Give it a try!&lt;/h2&gt;

&lt;p&gt;Try to solve this problem! It&amp;rsquo;s the most useful if you have some team-mates to practice &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair programming&lt;/a&gt;
as well, but it&amp;rsquo;s not a requirement, you can do it by yourself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the GitHub repo with the task description also holds a solution, so be careful when looking around if you don&amp;rsquo;t want to cheat! :)&lt;/p&gt;

&lt;p&gt;If you get stuck, it might help to read my
previous posts about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/enums/&#34;&gt;enumerations in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/testing1/&#34;&gt;testing in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hands-on-scala.github.io/post/patternmatch1/&#34;&gt;pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or just use good ol&amp;rsquo; Google :)&lt;/p&gt;

&lt;h2 id=&#34;the-team-s-solution:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;The team&amp;rsquo;s solution&lt;/h2&gt;

&lt;p&gt;A solution can be found in the GitHub repo mentioned above.&lt;/p&gt;

&lt;h2 id=&#34;what-we-learned:6beeeeddb038fa751cb02fd699880cfe&#34;&gt;What we learned&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s really worth to take some time at the end of a dojo to review
how it worked out, did we enjoy it, what we learned?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s probably different for each of us, but we always learn from each other.
Sometimes it&amp;rsquo;s just a new keystroke-combination of the
IDE that we use for development. Other times it&amp;rsquo;s a convenient feature of the programming language,
or a new approach for the task.&lt;/p&gt;

&lt;p&gt;It also happens that we learn something more &amp;lsquo;personal&amp;rsquo;: that YX is really fun to work with, or that
maybe YZ is afraid to go out to the whiteboard, but when working in pairs, (s)he opens up and has really brilliant ideas.&lt;/p&gt;

&lt;p&gt;In this specific case I learned how to measure code coverage in the Eclipse-based &lt;a href=&#34;http://scala-ide.org/&#34;&gt;Scala IDE&lt;/a&gt;, and of course, how Enumerations
can be used in Scala.&lt;/p&gt;

&lt;p&gt;Note &lt;em&gt;n +1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing our Scala code</title>
      <link>http://hands-on-scala.github.io/post/testing1/</link>
      <pubDate>Fri, 13 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/testing1/</guid>
      <description>

&lt;h1 id=&#34;why-test-our-code:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Why test our code?&lt;/h1&gt;

&lt;p&gt;This is a more &amp;lsquo;practical&amp;rsquo; topic, and I&amp;rsquo;m sure that many would argue
that learning how to use a unit testing framework is not strictly necessary
for newcomers. But according to my experience, getting into the
habit of writing tests regularly quickly pays off.&lt;/p&gt;

&lt;p&gt;Why? It&amp;rsquo;s nicely summarized &lt;a href=&#34;http://blog.xebia.com/5-reasons-why-you-should-test-your-code/&#34;&gt;here&lt;/a&gt;, I&amp;rsquo;m
just listing here the main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Regression Testing&lt;/li&gt;
&lt;li&gt;Improve The Implementation Via New Insights&lt;/li&gt;
&lt;li&gt;It Saves Time, Really&lt;/li&gt;
&lt;li&gt;Self-Updating Documentation&lt;/li&gt;
&lt;li&gt;It Is Fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;testing-frameworks-for-scala:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Testing frameworks for Scala&lt;/h1&gt;

&lt;p&gt;In Scala, you basically have two main-stream options if you want to write unit tests for your code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scalatest.org&#34;&gt;ScalaTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://etorreborre.github.io/specs2/&#34;&gt;Specs2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll explore the first one, the ScalaTest framework in this short post, through some basic examples.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-test-with-scalatest:6473280be67b92290b8d1101a0ce93d9&#34;&gt;A simple test with ScalaTest&lt;/h2&gt;

&lt;p&gt;To use ScalaTest we need to add it as a dependency to our &lt;em&gt;build.sbt&lt;/em&gt; file in the root of our
sbt project. (Note: If you don&amp;rsquo;t know how to set up a Scala project with SBT, you can find help &lt;a href=&#34;http://hands-on-scala.github.io/post/setup/&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to extend our initial &lt;em&gt;build.sbt&lt;/em&gt; with a new &lt;em&gt;libraryDepencencies&lt;/em&gt; part.
(&lt;em&gt;Note:&lt;/em&gt; If you already had dependencies in the libraryDependencies section, then just add a new line
to let SBT know that we want to use the ScalaTest framework. But be careful,
all, but the last line within the &lt;em&gt;Seq&lt;/em&gt; should end in a comma!)

name := &#34;my_tested_app&#34;
version := &#34;0.1&#34;
exportJars := true
scalaVersion := &#34;2.11.7&#34;
libraryDependencies ++= {
  Seq(
    &#34;org.scalatest&#34;       %%  &#34;scalatest&#34; % &#34;2.2.6&#34; % &#34;test&#34;
  )
}

In the above example, we tell SBT that we want to use the ScalaTest framework, version 2.6.6, so it
will download all the necessary things at the first subsequent &lt;em&gt;&amp;lsquo;sbt build&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt run&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;where-do-we-put-our-test-codes:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Where do we put our test codes?&lt;/h3&gt;

&lt;p&gt;Usually another directory with the name &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; is created next to the &lt;em&gt;&amp;lsquo;main&amp;rsquo;&lt;/em&gt; source folder
within the project&amp;rsquo;s &lt;em&gt;&amp;lsquo;src&amp;rsquo;&lt;/em&gt; folder, that contains all the source codes. Inside these, a parallel directory
structure is used to hold the &lt;em&gt;packages&lt;/em&gt; which group together our scala files. (More about packages in a later post.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/02_pattern_match_app/src&#34;&gt;See an example here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use this standard layout for your source codes, then SBT will automatically explore
your tests, and you&amp;rsquo;ll be able to run all of them simply via the &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command. But we jumped a bit ahead :)&lt;/p&gt;

&lt;p&gt;At first let&amp;rsquo;s write a test. We need to create a new file within the &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; directory.

import org.scalatest.FlatSpec

class MyTest extends FlatSpec {

  &#34;This example test&#34; should &#34;pass&#34; in {
    assert(2 == 1 + 2)
  }
}
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s save it as &lt;em&gt;&amp;lsquo;src/test/scala/MyFirstTest.scala&amp;rsquo;&lt;/em&gt; within your project folder.&lt;/p&gt;

&lt;h3 id=&#34;running-our-tests:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Running our tests&lt;/h3&gt;

&lt;p&gt;And now let&amp;rsquo;s see if it works: type into the console, while in the root of your SBT project:

sbt test
&lt;/p&gt;

&lt;p&gt;Of course, the above test will fail:&lt;/p&gt;


...
[info] *** 1 TEST FAILED ***
[error] Failed tests:
[error] 	MyTest
[error] (test:test) sbt.TestsFailedException: Tests unsuccessful
[error] Total time: 4 s, completed May 13, 2016 6:00:22 PM


&lt;p&gt;Because&amp;hellip; oh yes, 1+2 does not equal to 2. I just wanted to show a failing test at first. Now let&amp;rsquo;s fix it, and maybe add another test:

import org.scalatest.FlatSpec

class MyTest extends FlatSpec {

  &#34;This example test&#34; should &#34;pass&#34; in {
    assert(3 == 1 + 2)
  }

  &#34;This second example test&#34; should &#34;also pass&#34; in {
    assert(3 &gt; 2)
  }
}
&lt;/p&gt;

&lt;p&gt;After re-running &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt;:

[info] MyTest:
[info] This example test
[info] - should pass
[info] This second test
[info] - should also pass
[info] Run completed in 216 milliseconds.
[info] Total number of tests run: 2
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[success] Total time: 5 s, completed May 13, 2016 6:08:34 PM
&lt;/p&gt;

&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/blob/master/02_pattern_match_app/src/test/scala/pmatching/MatcherTest.scala&#34;&gt;Another example&lt;/a&gt;,
related to the last example of &lt;a href=&#34;http://hands-on-scala.github.io/post/patternmatch1/&#34;&gt;the previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note &lt;em&gt;n +1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic pattern matching in Scala</title>
      <link>http://hands-on-scala.github.io/post/patternmatch1/</link>
      <pubDate>Fri, 06 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/patternmatch1/</guid>
      <description>

&lt;h1 id=&#34;why-should-we-care-about-pattern-matching:709c56cceaa353d481f380974d67f3c0&#34;&gt;Why should we care about pattern matching?&lt;/h1&gt;

&lt;p&gt;Pattern matching is a quite commonly used &amp;ldquo;programming pattern&amp;rdquo; in functional languages, because it
fits nicely into the &amp;ldquo;functional way of thinking&amp;rdquo;, and it is quite powerful and handy as a tool.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s somewhat similar to a sequence of &lt;em&gt;if / else&lt;/em&gt; statements or to the &lt;em&gt;switch&lt;/em&gt; statement
of Java or C, but it is much more powerful, because it lets you form more complex
conditions for matching, even for the inside of an object.
In some cases
&lt;!-- (when dealing with objects of _case classes_ for example; we&#39;ll learn about them a bit later in more detail) --&gt;
Scala can automatically &lt;em&gt;decompose&lt;/em&gt; an object that you want to match and look inside it to check
if its structure matches your expectations.&lt;/p&gt;

&lt;!--This means 
that you can apply rules based on the object&#39;s type or inner structure without having 
to manually disassemble the object into its parts.--&gt;

&lt;p&gt;But, before going too deep, let&amp;rsquo;s see some examples.&lt;/p&gt;

&lt;h2 id=&#34;example-1-matching-value:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 1: matching value&lt;/h2&gt;

&lt;p&gt;Here the object what we match to patterns is &lt;em&gt;x&lt;/em&gt;, an integer.

object MatchTest1 extends App {
  def matchTest(x: Int): String = x match {
    case 1 =&gt; &#34;one&#34;
    case 2 =&gt; &#34;two&#34;
    case _ =&gt; &#34;many&#34;
  }
  println(matchTest(3))
}

Fairly simple, isn&amp;rsquo;t it? Just use the &lt;em&gt;match&lt;/em&gt; keyword after the name of the
thing you&amp;rsquo;ll want to match, and list your cases within curly braces.
The match expression in our case will return the value that appears on the right side of the &amp;lsquo;=&amp;gt;&amp;rsquo; arrow, corresponding
to the first matching case. So the order of the _case_s will matter if there is some overlap among the left sides of the arrows!&lt;/p&gt;

&lt;p&gt;One importatnt thing to note is the last case where an underscore is used: this is Scala&amp;rsquo;s notation
for &amp;ldquo;match anything&amp;rdquo;. Without this line, we would get a &amp;ldquo;scala.MatchError&amp;rdquo; because we called
the &lt;em&gt;matchTest()&lt;/em&gt; function with the value 3, which is not covered by the other &lt;em&gt;case&lt;/em&gt; branches.&lt;/p&gt;

&lt;p&gt;So the main point to remember from here is that you should be sure to cover all
possible options when using a &lt;em&gt;match&lt;/em&gt; expression if you want to avoid ugly errors.
The fail-safe option usually is to use the underscore as the last &lt;em&gt;case&lt;/em&gt;.
It will define a default path for the program flow for &amp;ldquo;all other cases&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;(Note: I just copied this example from the
&lt;a href=&#34;http://docs.scala-lang.org/tutorials/tour/pattern-matching.html&#34;&gt;official documentation&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;example-2-matching-type:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 2: matching type&lt;/h2&gt;

&lt;p&gt;If we want to write a function that behaves differently for different input &lt;em&gt;types&lt;/em&gt;, we can write something like:

def getType(x: Any): String = {
  x match {
    case x: String =&gt; &#34;String&#34;
    case x: Integer =&gt; &#34;Int&#34;
    case _ =&gt; &#34;I don&#39;t know&#34;
  }
}

The main difference from the previous example is that now we used &lt;em&gt;&amp;ldquo;x: Type&amp;rdquo;&lt;/em&gt; instead of a specified value on the left side
of the arrow, after the &lt;em&gt;case&lt;/em&gt; keyword. It&amp;rsquo;s still simple :)&lt;/p&gt;

&lt;p&gt;Note 1: &amp;ldquo;&lt;em&gt;Any&lt;/em&gt;&amp;rdquo; is a general type in Scala, similar to the &amp;ldquo;&lt;em&gt;Object&lt;/em&gt;&amp;rdquo; of Java, which is an ancestor of all other types.&lt;/p&gt;

&lt;p&gt;Note 2: You don&amp;rsquo;t need to use the same value name in the cases, because each
case has its own scope with regards of the incoming
object to be matched. Just be sure to use the same name on both sides of the arrow within a case line.

  def getType2(x: Any): String = {
    x match {
      case a: String =&gt; &#34;String: &#34; + a
      case b: Integer =&gt; &#34;Int: &#34; + b
      case _ =&gt; &#34;I don&#39;t know&#34;
    }
  }
&lt;/p&gt;

&lt;h2 id=&#34;example-3-using-guards:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 3: using guards&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say we need some extra conditions to be true before applying the right side of a &lt;em&gt;case&lt;/em&gt;.
Scala lets us perform these additional checks within any of the cases independently, as in the
following example:

def getType3(x: Any): String = {
  x match {
    case a: String if a.startsWith(&#34;He&#34;) =&gt; &#34;String with &#39;He&#39;&#34;
    case b: Integer if b &gt; 0 =&gt; &#34;Positive integer&#34;
    case _ =&gt; &#34;I don&#39;t know&#34;
  }
}

These additional conditions before the cases&amp;rsquo; arrows are called &amp;ldquo;guards&amp;rdquo;.
If they are evaluated to false, then
the corresponding case branch is considered not matching, so the next case will be tried.&lt;/p&gt;

&lt;h2 id=&#34;example-4-matching-structure:709c56cceaa353d481f380974d67f3c0&#34;&gt;Example 4: matching structure&lt;/h2&gt;

&lt;p&gt;I promised in the first paragraph that in some cases we will be able to
&amp;ldquo;automatically &lt;em&gt;decompose&lt;/em&gt; an object&amp;rdquo; to look inside it and check
if its structure matches our expectations.&lt;/p&gt;

&lt;p&gt;How does it work in Scala, and what are the prerequisites?&lt;/p&gt;

&lt;p&gt;The answer is: &lt;em&gt;case classes&lt;/em&gt;! My next blog post will cover them in more detail.
For now let&amp;rsquo;s think about a case class as a composite object with some
auto-magic: automatically generated constructors and getters, for example.&lt;/p&gt;

&lt;p&gt;For the more curious, here are
&lt;a href=&#34;http://stackoverflow.com/questions/2312881/what-is-the-difference-between-scalas-case-class-and-class%29&#34;&gt;some nice and short explanations&lt;/a&gt;, and the official (quite dense) &lt;a href=&#34;http://docs.scala-lang.org/tutorials/tour/case-classes.html&#34;&gt;description of case classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for an example of automatic decomposition, at first we need a
case class. We&amp;rsquo;ll write one, representing a tweet message, that has three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an identifier (&lt;em&gt;id: Long&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;an author (&lt;em&gt;author: User&lt;/em&gt;, that itself could be a complex case class, now it only contains one String, a name)&lt;/li&gt;
&lt;li&gt;a message (&lt;em&gt;msg: String&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defining these new types (&lt;em&gt;User&lt;/em&gt; and &lt;em&gt;TweetMsg&lt;/em&gt;) in Scala takes only two fairly short lines:&lt;/p&gt;

&lt;p&gt;
case class User(name: String)
case class TweetMsg(id: Long, user: User, msg: String)
&lt;/p&gt;

&lt;p&gt;And now a function can match a tweet&amp;rsquo;s inners like this:&lt;/p&gt;

&lt;p&gt;
def processTweet(tweet: TweetMsg) = tweet match {
  case TweetMsg(id, _, _) if id &lt; 0 =&gt; &#34;Invalid (negative) tweet id!&#34;
  case TweetMsg(_, user, _) if user.name == &#34;adorster&#34; =&gt; &#34;Hello, &#34; + user.name + &#34;!&#34;
  case _ =&gt; &#34;Just another tweet&#34;
}
&lt;/p&gt;

&lt;p&gt;Example codes with tests are available at &lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/02_pattern_match_app&#34;&gt;my scala-examples github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note &lt;em&gt;n +1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enums in Scala</title>
      <link>http://hands-on-scala.github.io/post/enums/</link>
      <pubDate>Fri, 29 Apr 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/enums/</guid>
      <description>

&lt;h1 id=&#34;enumerations-what-are-they-for:1ef00569cd8c4dbcb2b9bfd22661e936&#34;&gt;Enumerations - what are they for?&lt;/h1&gt;

&lt;p&gt;Generally in programming, enumerations (a.k.a. enums)
are light-weight means to create a very simple model within our code, for
representing a custom type with a limited set of possible values with readable
names.
This description might sound a bit too abstract, so
let&amp;rsquo;s see an example instead.&lt;/p&gt;

&lt;h2 id=&#34;example-days-of-week:1ef00569cd8c4dbcb2b9bfd22661e936&#34;&gt;Example: days of week&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s introduce an enum for representing the days of week.
In Scala, you have to create an &lt;em&gt;object&lt;/em&gt; for this, which
needs to extend Scala&amp;rsquo;s &lt;em&gt;Enumeration&lt;/em&gt; trait (we&amp;rsquo;ll learn more about objects
and traits later).&lt;/p&gt;


object DayOfWeek extends Enumeration {
  val Sun, Mon, Wed, Thu, Fri, Sat = Value
}


&lt;p&gt;As you can see, it&amp;rsquo;s almost as easy as listing the possible values,
separated by commas. But don&amp;rsquo;t forget the &amp;ldquo;val&amp;rdquo; from the beginning and
the &amp;ldquo; = Value&amp;rdquo; part from the end of the value list, because without them,
your shiny new enum will not work.&lt;/p&gt;

&lt;p&gt;After defining this new enum in our code
we can start using days of week (after importing them!) as in the
following example:

import DayOfWeek._

override def main(args: Array[String]): Unit = {
  println(Mon)
}
&lt;/p&gt;

&lt;p&gt;And this tiny program will print the string &amp;ldquo;Mon&amp;rdquo; to the screen. Try it!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also easy to loop over all possible values of an enum:&lt;/p&gt;


override def main(args: Array[String]): Unit = {
  DayOfWeek.values.foreach { day =&gt; println(day) }
}


&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;In the next post, we&amp;rsquo;ll see how to use enum values when using pattern matching in Scala.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Short intro to Scala</title>
      <link>http://hands-on-scala.github.io/post/setup/</link>
      <pubDate>Fri, 22 Apr 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/setup/</guid>
      <description>

&lt;h1 id=&#34;welcome:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Welcome!&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;re probably here because you&amp;rsquo;ve heard that Scala is a cool programming language
that you&amp;rsquo;d like to learn. Because, hey, it&amp;rsquo;s object-oriented and functional at the same time!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll show you something very basic at first: a bit more &amp;ldquo;personal&amp;rdquo; version
of the famous
&lt;a href=&#34;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&#34;&gt;&amp;ldquo;Hello World&amp;rdquo; program&lt;/a&gt;.
The following little Scala program will ask for your name and then it&amp;rsquo;ll print &amp;ldquo;Hello, &lt;You&gt;!&amp;rdquo; to the console.&lt;/p&gt;


object WordApp extends App {
  val name = scala.io.StdIn.readLine(&#34;What&#39;s your name? \n&#34;)
  println(&#34;Hello &#34; + name + &#34;!&#34;)
}


&lt;p&gt;In case this is really your very first Scala program,
you might ask: how do I make the above example &lt;em&gt;App&lt;/em&gt; come alive?
Well, you have more than one option. (Btw, you&amp;rsquo;ll have to get used to this in the world of Scala &amp;ndash; usually there is more than one way to do things. I admit that this fact is not very
beginner-friendly, but later it will come handy.)&lt;/p&gt;

&lt;p&gt;At first let&amp;rsquo;s not complicate things with IDEs and GUIs, let&amp;rsquo;s just use the
console tools available. Another post will show you how to use Eclipse or IntelliJ IDEA for
Scala development.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-our-first-scala-project-with-sbt:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Setting up our first Scala project with SBT&lt;/h2&gt;

&lt;p&gt;SBT stands for the &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;&amp;ldquo;Scala Build Tool&amp;rdquo;&lt;/a&gt;. It&amp;rsquo;s like &amp;lsquo;gradle&amp;rsquo; or &amp;lsquo;maven&amp;rsquo; for Java.
If you are not familiar with build tools, then consult the Internet :)&lt;/p&gt;

&lt;h3 id=&#34;installing-sbt:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Installing SBT&lt;/h3&gt;

&lt;p&gt;Check the latest install documentation here:
&lt;a href=&#34;http://www.scala-sbt.org/release/docs/Setup.html&#34;&gt;http://www.scala-sbt.org/release/docs/Setup.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-the-hello-project:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Creating the &amp;ldquo;Hello&amp;rdquo; project&lt;/h3&gt;

&lt;p&gt;It won&amp;rsquo;t be as painful as it might seem at first :)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really just two steps writing the source files to an appropriate location,
and give some hints to SBT about how it should do its work.&lt;/p&gt;

&lt;h4 id=&#34;the-source-tree:2cc0b07f42930e4520820be1fe66f913&#34;&gt;The source tree&lt;/h4&gt;

&lt;p&gt;SBT expects the source Scala files (and tests, but we won&amp;rsquo;t have any for now) to be
in a specific folder. So, let&amp;rsquo;s go ahead and create them (I&amp;rsquo;m assuming you have
soma basic experience with the Linux command line):&lt;/p&gt;


mkdir -p src/main/scala
mkdir -p src/test/scala


&lt;p&gt;Within these two directories we&amp;rsquo;ll usually have somewhat parallel sub-directories
with packages for our main source files and tests. Now we won&amp;rsquo;t have any packages or tests,
for simplicity.&lt;/p&gt;

&lt;p&gt;The source file we&amp;rsquo;ll edit must be in the &amp;ldquo;src/main/scala/&amp;rdquo; folder. Let&amp;rsquo;s name it
&amp;ldquo;App.scala&amp;rdquo;. (You can use another name, but it wouldn&amp;rsquo;t be a good idea to change
the &amp;ldquo;.scala&amp;rdquo; extension.)
And its contents, as above:

object WordApp extends App {
  val name = scala.io.StdIn.readLine(&#34;What&#39;s your name? \n&#34;)
  println(&#34;Hello &#34; + name + &#34;!&#34;)
}

So, just save this into a file &amp;ldquo;src/main/scala/App.scala&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;the-build-sbt-file:2cc0b07f42930e4520820be1fe66f913&#34;&gt;The &amp;ldquo;build.sbt&amp;rdquo; file&lt;/h4&gt;

&lt;p&gt;This little confg-like file will set some useful settings for your project,
and also contains a list of dependencies.&lt;/p&gt;

&lt;p&gt;It should be saved to the top-level directory of your project, next to the &amp;ldquo;src&amp;rdquo; folder.&lt;/p&gt;

&lt;p&gt;And its contents:&lt;/p&gt;


name := &#34;01_grader_app&#34;

version := &#34;0.1&#34;

exportJars := true

scalaVersion := &#34;2.11.8&#34;


&lt;p&gt;Note the empty lines! Looks stupid, but they are actually necessary, if you are
using an older SBT version, prior to 0.13.7.
(&lt;a href=&#34;http://stackoverflow.com/questions/21780787/why-does-sbt-version-%E2%89%A4-0-13-6-require-blank-lines-between-settings-in-sbt-fil&#34;&gt;Here&lt;/a&gt; is an explanation.)&lt;/p&gt;

&lt;p&gt;To check which version you have, run:

sbt &#39;inspect sbtVersion&#39;
&lt;/p&gt;

&lt;p&gt;With newer versions (from 0.13.7 up) you don&amp;rsquo;t need the empty lines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://scalatutorials.com/beginner/2013/07/18/getting-started-with-sbt/&#34;&gt;More help with SBT&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-run-it-already:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Let&amp;rsquo;s run it already!&lt;/h3&gt;

&lt;p&gt;Standing in the root of your project, just say:

sbt run
&lt;/p&gt;

&lt;p&gt;I hope it works for all of you now! :)&lt;/p&gt;

&lt;h3 id=&#34;more-things-to-read:2cc0b07f42930e4520820be1fe66f913&#34;&gt;More things to read&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The official Scala site: &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;www.scala-lang.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SBT: &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;www.scala-sbt.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>