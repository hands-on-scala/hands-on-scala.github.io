<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Hands-on Scala Blog</title>
    <link>http://hands-on-scala.github.io/categories/testing/</link>
    <description>Recent content in Testing on Hands-on Scala Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 May 2016 17:30:00 +0200</lastBuildDate>
    <atom:link href="http://hands-on-scala.github.io/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Testing our Scala code</title>
      <link>http://hands-on-scala.github.io/post/testing1/</link>
      <pubDate>Fri, 13 May 2016 17:30:00 +0200</pubDate>
      
      <guid>http://hands-on-scala.github.io/post/testing1/</guid>
      <description>

&lt;h1 id=&#34;why-test-our-code:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Why test our code?&lt;/h1&gt;

&lt;p&gt;This is a more &amp;lsquo;practical&amp;rsquo; topic, and I&amp;rsquo;m sure that many would argue
that learning how to use a unit testing framework is not strictly necessary
for newcomers. But according to my experience, getting into the
habit of writing tests regularly quickly pays off.&lt;/p&gt;

&lt;p&gt;Why? It&amp;rsquo;s nicely summarized &lt;a href=&#34;http://blog.xebia.com/5-reasons-why-you-should-test-your-code/&#34;&gt;here&lt;/a&gt;, I&amp;rsquo;m
just listing here the main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Regression Testing&lt;/li&gt;
&lt;li&gt;Improve The Implementation Via New Insights&lt;/li&gt;
&lt;li&gt;It Saves Time, Really&lt;/li&gt;
&lt;li&gt;Self-Updating Documentation&lt;/li&gt;
&lt;li&gt;It Is Fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;testing-frameworks-for-scala:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Testing frameworks for Scala&lt;/h1&gt;

&lt;p&gt;In Scala, you basically have two main-stream options if you want to write unit tests for your code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scalatest.org&#34;&gt;ScalaTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://etorreborre.github.io/specs2/&#34;&gt;Specs2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll explore the first one, the ScalaTest framework in this short post, through some basic examples.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-test-with-scalatest:6473280be67b92290b8d1101a0ce93d9&#34;&gt;A simple test with ScalaTest&lt;/h2&gt;

&lt;p&gt;To use ScalaTest we need to add it as a dependency to our &lt;em&gt;build.sbt&lt;/em&gt; file in the root of our
sbt project. (Note: If you don&amp;rsquo;t know how to set up a Scala project with SBT, you can find help &lt;a href=&#34;http://hands-on-scala.github.io/post/setup/&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to extend our initial &lt;em&gt;build.sbt&lt;/em&gt; with a new &lt;em&gt;libraryDepencencies&lt;/em&gt; part.
(&lt;em&gt;Note:&lt;/em&gt; If you already had dependencies in the libraryDependencies section, then just add a new line
to let SBT know that we want to use the ScalaTest framework. But be careful,
all, but the last line within the &lt;em&gt;Seq&lt;/em&gt; should end in a comma!)

name := &#34;my_tested_app&#34;
version := &#34;0.1&#34;
exportJars := true
scalaVersion := &#34;2.11.7&#34;
libraryDependencies ++= {
  Seq(
    &#34;org.scalatest&#34;       %%  &#34;scalatest&#34; % &#34;2.2.6&#34; % &#34;test&#34;
  )
}

In the above example, we tell SBT that we want to use the ScalaTest framework, version 2.6.6, so it
will download all the necessary things at the first subsequent &lt;em&gt;&amp;lsquo;sbt build&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt run&amp;rsquo;&lt;/em&gt; or &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;where-do-we-put-our-test-codes:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Where do we put our test codes?&lt;/h3&gt;

&lt;p&gt;Usually another directory with the name &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; is created next to the &lt;em&gt;&amp;lsquo;main&amp;rsquo;&lt;/em&gt; source folder
within the project&amp;rsquo;s &lt;em&gt;&amp;lsquo;src&amp;rsquo;&lt;/em&gt; folder, that contains all the source codes. Inside these, a parallel directory
structure is used to hold the &lt;em&gt;packages&lt;/em&gt; which group together our scala files. (More about packages in a later post.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/tree/master/02_pattern_match_app/src&#34;&gt;See an example here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use this standard layout for your source codes, then SBT will automatically explore
your tests, and you&amp;rsquo;ll be able to run all of them simply via the &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt; command. But we jumped a bit ahead :)&lt;/p&gt;

&lt;p&gt;At first let&amp;rsquo;s write a test. We need to create a new file within the &lt;em&gt;&amp;lsquo;test&amp;rsquo;&lt;/em&gt; directory.

import org.scalatest.FlatSpec

class MyTest extends FlatSpec {

  &#34;This example test&#34; should &#34;pass&#34; in {
    assert(2 == 1 + 2)
  }
}
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s save it as &lt;em&gt;&amp;lsquo;src/test/scala/MyFirstTest.scala&amp;rsquo;&lt;/em&gt; within your project folder.&lt;/p&gt;

&lt;h3 id=&#34;running-our-tests:6473280be67b92290b8d1101a0ce93d9&#34;&gt;Running our tests&lt;/h3&gt;

&lt;p&gt;And now let&amp;rsquo;s see if it works: type into the console, while in the root of your SBT project:

sbt test
&lt;/p&gt;

&lt;p&gt;Of course, the above test will fail:&lt;/p&gt;


...
[info] *** 1 TEST FAILED ***
[error] Failed tests:
[error] 	MyTest
[error] (test:test) sbt.TestsFailedException: Tests unsuccessful
[error] Total time: 4 s, completed May 13, 2016 6:00:22 PM


&lt;p&gt;Because&amp;hellip; oh yes, 1+2 does not equal to 2. I just wanted to show a failing test at first. Now let&amp;rsquo;s fix it, and maybe add another test:

import org.scalatest.FlatSpec

class MyTest extends FlatSpec {

  &#34;This example test&#34; should &#34;pass&#34; in {
    assert(3 == 1 + 2)
  }

  &#34;This second example test&#34; should &#34;also pass&#34; in {
    assert(3 &gt; 2)
  }
}
&lt;/p&gt;

&lt;p&gt;After re-running &lt;em&gt;&amp;lsquo;sbt test&amp;rsquo;&lt;/em&gt;:

[info] MyTest:
[info] This example test
[info] - should pass
[info] This second test
[info] - should also pass
[info] Run completed in 216 milliseconds.
[info] Total number of tests run: 2
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[success] Total time: 5 s, completed May 13, 2016 6:08:34 PM
&lt;/p&gt;

&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ador/scala-examples/blob/master/02_pattern_match_app/src/test/scala/pmatching/MatcherTest.scala&#34;&gt;Another example&lt;/a&gt;,
related to the last example of &lt;a href=&#34;http://hands-on-scala.github.io/post/patternmatch1/&#34;&gt;the previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note &lt;em&gt;n +1&lt;/em&gt; : Until I set up a comments section somehow here, feedback is welcome via &lt;a href=&#34;https://twitter.com/adorster&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>